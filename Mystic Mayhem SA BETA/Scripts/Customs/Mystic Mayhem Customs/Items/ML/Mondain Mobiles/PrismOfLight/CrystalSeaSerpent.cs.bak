using System;
using Server;
using Server.Items;

namespace Server.Mobiles
{
	[CorpseName( "a crystal serpents corpse" )]
	public class CrystalSeaSerpent : BaseCreature
	{
		[Constructable]
		public CrystalSeaSerpent() : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{
			Name = "a crystal serpent";
			Body = 150;
			BaseSoundID = 447;
			Hue = 91;

			SetStr( 259, 411 );
			SetDex( 103, 141 );
			SetInt( 96, 151 );

			SetHits( 231, 323 );
			SetStam( 103, 141 );
			SetMana( 96, 151 );

			SetDamage( 16, 24 );

			SetDamageType( ResistanceType.Physical, 10 );
			SetDamageType( ResistanceType.Cold, 45 );
			SetDamageType( ResistanceType.Energy, 45 );

			SetResistance( ResistanceType.Physical, 51, 64 );
			SetResistance( ResistanceType.Fire, 70, 80 );
			SetResistance( ResistanceType.Cold, 72, 90 );
			SetResistance( ResistanceType.Poison, 60, 70 );
			SetResistance( ResistanceType.Energy, 71, 90 );

			SetSkill( SkillName.MagicResist, 61.5, 75.0 );
			SetSkill( SkillName.Tactics, 60.8, 70.0 );
			SetSkill( SkillName.Wrestling, 60.6, 70.0 );

			Fame = 6000;
			Karma = -6000;

			VirtualArmor = 60;
			CanSwim = true;
			CantWalk = true;

			PackItem( new SulfurousAsh( 36 ) );
			PackItem( new BlackPearl( 36 ) );

			if ( Utility.RandomDouble() <= 0.30 )
				PackItem( new CrushedCrystal() );

		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.Rich, 2 );
		}

		public override bool HasBreath{ get{ return true; } }
		public override int Meat{ get{ return 1; } }
		public override int Scales{ get{ return 8; } }
		public override ScaleType ScaleType{ get{ return ScaleType.Blue; } }
		public override bool BardImmune{ get{ return true; } }
		public override int Hides{ get{ return 2; } } 
      		public override HideType HideType{ get{ return HideType.Barbed; } }

		public CrystalSeaSerpent( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}
}