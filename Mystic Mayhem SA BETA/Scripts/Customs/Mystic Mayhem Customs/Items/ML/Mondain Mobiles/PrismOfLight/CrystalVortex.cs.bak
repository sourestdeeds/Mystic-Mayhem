using System;
using Server;
using Server.Items;

namespace Server.Mobiles
{
	[CorpseName( "an crystal vortex corpse" )]
	public class CrystalVortex : BaseCreature
	{

		[Constructable]
		public CrystalVortex() : base( AIType.AI_Melee, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{
			Name = "a crystal vortex";
			Body = 164;
			Hue = 391;

			SetStr( 200 );
			SetDex( 200 );
			SetInt( 100 );

			SetHits( 370 );
			SetStam( 250 );
			SetMana( 0 );

			SetDamage( 24, 27 );

			SetDamageType( ResistanceType.Physical, 0 );
			SetDamageType( ResistanceType.Energy, 100 );

			SetResistance( ResistanceType.Physical, 60, 70 );
			SetResistance( ResistanceType.Fire, 40, 50 );
			SetResistance( ResistanceType.Cold, 40, 50 );
			SetResistance( ResistanceType.Poison, 40, 50 );
			SetResistance( ResistanceType.Energy, 90, 100 );

			SetSkill( SkillName.MagicResist, 99.9 );
			SetSkill( SkillName.Tactics, 90.0 );
			SetSkill( SkillName.Wrestling, 100.0 );

			Fame = 1500;
			Karma = -1500;

			VirtualArmor = 40;
			if ( Utility.RandomDouble() <= 0.30 )
				PackItem( new JaggedCrystal() );

		}

		public override Poison PoisonImmune{ get{ return Poison.Lethal; } }

		public override int GetAngerSound()
		{
			return 0x15;
		}

		public override int GetAttackSound()
		{
			return 0x28;
		}

		public CrystalVortex( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );

			writer.Write( (int) 0 ); // version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();

			if ( BaseSoundID == 263 )
				BaseSoundID = 0;
		}
	}
}
