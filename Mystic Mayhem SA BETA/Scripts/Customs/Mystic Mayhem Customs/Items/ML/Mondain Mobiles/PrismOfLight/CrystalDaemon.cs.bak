using System;
using Server;
using Server.Misc;
using Server.Items;

namespace Server.Mobiles
{
	[CorpseName( "a crystal daemon corpse" )]
	public class CrystalDaemon : BaseCreature
	{

		[Constructable]
		public CrystalDaemon() : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{
			Name = "crystal daemon";
			Body = 784;
			Hue = 1301;
			BaseSoundID = 0x47D;

			SetHits( 200, 215 );
			SetMana( 800, 840 );
			SetStam( 130, 145 );

			SetStr( 151, 197 );
			SetDex( 130, 148 );
			SetInt( 801, 840 );



			SetDamage( 9, 15 );


			SetDamageType( ResistanceType.Cold, 40 );
			SetDamageType( ResistanceType.Energy, 60 );

			SetResistance( ResistanceType.Physical, 23, 37 );
			SetResistance( ResistanceType.Fire, 7, 20 );
			SetResistance( ResistanceType.Cold, 60, 78 );
			SetResistance( ResistanceType.Poison, 23, 39 );
			SetResistance( ResistanceType.Energy, 65, 73 );

			SetSkill( SkillName.Wrestling, 60.8, 78.3 );
			SetSkill( SkillName.Tactics, 70.5, 78.6 );
			SetSkill( SkillName.MagicResist, 100.2, 109.6 );
			SetSkill( SkillName.Anatomy, 50, 60 ); //TODO
			SetSkill( SkillName.Magery, 122.4, 129.2 );
			SetSkill( SkillName.EvalInt, 100.1, 109.3 );
			SetSkill( SkillName.Meditation, 100.5, 106.9 );

			Fame = 7000;
			Karma = -7000;

			VirtualArmor = 100;

			Tamable = false; 

			if ( Utility.RandomDouble() <= 0.35 )
				PackItem( new ScatteredCrystals() );

		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.Gems, 4 );
			AddLoot( LootPack.Rich );
		}

		public override HideType HideType{ get{ return HideType.Spined; } }
		public override int Hides{ get{ return 5; } }
		public override bool CanRummageCorpses{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Deadly; } }
		public override int TreasureMapLevel{ get{ return 4; } }
		public override bool BardImmune{ get{ return true; } }

		public CrystalDaemon( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();
		}
	}
}