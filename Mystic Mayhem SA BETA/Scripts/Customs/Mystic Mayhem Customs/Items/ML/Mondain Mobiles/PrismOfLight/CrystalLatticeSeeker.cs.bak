using System;
using Server;
using Server.Misc;
using Server.Items;

namespace Server.Mobiles
{
	[CorpseName( "a crystal corpse" )]
	public class CrystalLatticeSeeker : BaseCreature
	{

		[Constructable]
		public CrystalLatticeSeeker() : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{

			Body = 123;
			Hue = 1151;
			Name = "crystal lattice seeker";
			// BaseSoundID = 0x467;

			SetHits( 355, 530 );
			SetMana( 350, 460 );
			SetStam( 190, 245 );

			SetStr( 605, 845 );
			SetDex( 190, 245 );
			SetInt( 350, 460 );



			SetDamage( 9, 15 );

			SetDamageType( ResistanceType.Physical, 100 );

			SetResistance( ResistanceType.Physical, 80, 90 );
			SetResistance( ResistanceType.Fire, 40, 50 );
			SetResistance( ResistanceType.Cold, 40, 50 );
			SetResistance( ResistanceType.Poison, 40, 50 );
			SetResistance( ResistanceType.Energy, 40, 50 );

			SetSkill( SkillName.Wrestling, 97.7, 100.0 );
			SetSkill( SkillName.Tactics, 90.1, 99.5 );
			SetSkill( SkillName.MagicResist, 90.6, 99.5 );
			SetSkill( SkillName.Anatomy, 51.1, 74.2 );

			SetSkill( SkillName.Magery, 99.1,100.0 );
			SetSkill( SkillName.EvalInt, 90.3, 99.8 );
			SetSkill( SkillName.Meditation, 90.1, 99.6 );

			Fame = 7000;
			Karma = -7000;

			VirtualArmor = 100;

			Tamable = false; 

			if ( Utility.RandomDouble() <= 0.30 )
			PackItem( new PieceOfCrystal() );

		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.LowScrolls );
			AddLoot( LootPack.Gems, 12 );
			AddLoot( LootPack.FilthyRich );

		}

		public override bool BardImmune{ get{ return true; } }


		public CrystalLatticeSeeker( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();
		}
	}
}