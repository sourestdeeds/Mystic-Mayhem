using System;
using System.Collections;
using Server;
using Server.Items;
using Server.Factions;

namespace Server.Mobiles
{
	[CorpseName( "a Shimmering Effusion corpse" )]
	public class ShimmeringEffusion : BaseCreature
	{
		private Map m_TargetMap;
		private Point3D m_GateLoc;
		private bool m_Summon;

		[CommandProperty( AccessLevel.GameMaster )]
		public Map TargetMap
		{
			get{ return m_TargetMap; }
			set{ m_TargetMap = value; }
		}

		[CommandProperty( AccessLevel.GameMaster )]
		public Point3D GateLoc
		{
			get{ return m_GateLoc; }
			set{ m_GateLoc = value; }
		}


		[CommandProperty( AccessLevel.GameMaster )]
		public bool Summon
		{
			get{ return m_Summon; }
			set{ m_Summon = value; }
		}
		[Constructable]
		public ShimmeringEffusion() : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{
			Name = "a ShimmeringEffusion";
			Body = 260;			

			SetStr( 471, 600 );
			SetDex( 226, 245 );
			SetInt( 376, 405 );

			SetHits( 14000, 15000 );

			SetDamage( 45, 59 );

			
			SetDamageType( ResistanceType.Cold, 20 );
			SetDamageType( ResistanceType.Energy, 80 );

			SetResistance( ResistanceType.Physical, 50, 60 );
			SetResistance( ResistanceType.Fire, 50, 60 );
			SetResistance( ResistanceType.Cold, 50, 60 );
			SetResistance( ResistanceType.Poison, 55, 65 );
			SetResistance( ResistanceType.Energy, 60, 70 );

			SetSkill( SkillName.EvalInt, 140.0 );
			SetSkill( SkillName.Magery, 120.1, 150.0 );
			SetSkill( SkillName.Meditation, 122.1, 155.0 );
			SetSkill( SkillName.MagicResist, 120.1, 160.0 );
			SetSkill( SkillName.Tactics, 80.1, 99.0 );

			Fame = 18000;
			Karma = -18000;

			VirtualArmor = 70;
			PackItem( new Silver( 20, 30 ) );
			if ( Utility.Random( 3 ) < 1 )
				PackItem( new GemPouch() );
			

		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.UltraRich, 2 );

		}

		public override void OnDeath( Container c )
		{
			if ( Utility.Random( 2 ) < 1 )
				c.DropItem( new CapturedEssence() );
			int swtch = Utility.Random(160);
			if ( swtch < 80 )
			{
				switch ( Utility.Random( 6 ) )
				{
				case 0: c.DropItem( new OvenMitts(2) ); break;
				case 1: c.DropItem( new NimbleFingers(2) ); break;
				case 2: c.DropItem( new RubberGloves(2) ); break;
				case 3: c.DropItem( new TailorsTouch(2) ); break;
				case 4: c.DropItem( new TinkersAid(2) ); break;
				case 5: c.DropItem( new WoodWonder(2) ); break;
				}
			}
			else if ( swtch < 115 )
			{
				switch ( Utility.Random( 6 ) )
				{
				case 0: c.DropItem( new OvenMitts(4) ); break;
				case 1: c.DropItem( new NimbleFingers(4) ); break;
				case 2: c.DropItem( new RubberGloves(4) ); break;
				case 3: c.DropItem( new TailorsTouch(4) ); break;
				case 4: c.DropItem( new TinkersAid(4) ); break;
				case 5: c.DropItem( new WoodWonder(4) ); break;
				}
			}
			else if ( swtch < 125 )
			{
				switch ( Utility.Random( 6 ) )
				{
				case 0: c.DropItem( new OvenMitts(6) ); break;
				case 1: c.DropItem( new NimbleFingers(6) ); break;
				case 2: c.DropItem( new RubberGloves(6) ); break;
				case 3: c.DropItem( new TailorsTouch(6) ); break;
				case 4: c.DropItem( new TinkersAid(6) ); break;
				case 5: c.DropItem( new WoodWonder(6) ); break;
				}
			}
			if (m_Summon)
				ClearGate( GateLoc.X, GateLoc.Y, GateLoc.Z, TargetMap );
			base.OnDeath( c );
		}
		private static Queue m_ToDelete = new Queue();
		public static void ClearGate( int x, int y, int z, Map map )
		{
			IPooledEnumerable eable = map.GetItemsInRange( new Point3D( x, y, z ), 0 );

			foreach ( Item item in eable )
			{
				if ( item is Moongate && item.Z == z )
					m_ToDelete.Enqueue( item );
			}

			eable.Free();

			while ( m_ToDelete.Count > 0 )
					((Item)m_ToDelete.Dequeue()).Delete();
		}


	/*	public override void OnDeath( Container c )
		{

			switch ( Utility.Random( 25 ))
			{
			case 0: c.DropItem( new BigElvenChair() ); break;
			case 1: c.DropItem( new ColorfulTapestry() ); break;
			case 2: c.DropItem( new DecorativeAcorn() ); break;
			case 3: c.DropItem( new ElvenAlchemyTable() ); break;
			case 4: c.DropItem( new ElvenBookshelf() ); break;
			case 5: c.DropItem( new ElvenBookStand() ); break;
			case 6: c.DropItem( new ElvenDresser() ); break;
			case 7: c.DropItem( new ElvenLoveSeat() ); break;
			case 8: c.DropItem( new ElvenReadingChair() ); break;
			case 9: c.DropItem( new ElvenStorageTable() ); break;
			case 10: c.DropItem( new ElvenTapestry() ); break;
			case 11: c.DropItem( new ElvenWallMap() ); break;
			case 12: c.DropItem( new ElvenWashBasin() ); break;
			case 13: c.DropItem( new FancyElvenArmoire() ); break;
			case 14: c.DropItem( new FancyElvenTable() ); break;
			case 15: c.DropItem( new FruitBowl() ); break;
			case 16: c.DropItem( new LargeGlowingBeetle() ); break;
			case 17: c.DropItem( new LargeGlowingBeetle2() ); break;
			case 18: c.DropItem( new LargeGlowingBeetle3() ); break;
			case 19: c.DropItem( new OrnateElvenBox() ); break;
			case 20: c.DropItem( new OrnateElvenChair() ); break;
			case 21: c.DropItem( new OrnateElvenChest() ); break;
			case 22: c.DropItem( new OrnateElvenTable() ); break;
			case 23: c.DropItem( new SimpleElvenArmoire() ); break;
			case 24: c.DropItem( new SmallElvenTapestry() ); break;

			}  

			base.OnDeath( c );
		}*/
		public override void OnGotMeleeAttack( Mobile attacker )
		{
			base.OnGotMeleeAttack( attacker );
			if ( Utility.RandomDouble() <= 0.10 )
				SpawnFetidEssence( attacker );
		}
		public override void OnDamagedBySpell( Mobile caster )
		{
			if ( caster == this )
				return;
			if ( Utility.RandomDouble() <= 0.10 )
				SpawnFetidEssence( caster );
		}

		public void SpawnFetidEssence( Mobile target )
		{
			Map map = target.Map;

			if ( map == null )
				return;

			int fes = 0;

			foreach ( Mobile m in this.GetMobilesInRange( 10 ) )
			{
				if ( m is FetidEssence )
					++fes;
			}

			if ( fes < 5 )
			{
				BaseCreature fe = new FetidEssence();

				fe.Team = this.Team;

				Point3D loc = target.Location;
				bool validLocation = false;

				for ( int j = 0; !validLocation && j < 10; ++j )
				{
					int x = target.X + Utility.Random( 3 ) - 1;
					int y = target.Y + Utility.Random( 3 ) - 1;
					int z = map.GetAverageZ( x, y );

					if ( validLocation = map.CanFit( x, y, this.Z, 16, false, false ) )
						loc = new Point3D( x, y, Z );
					else if ( validLocation = map.CanFit( x, y, z, 16, false, false ) )
						loc = new Point3D( x, y, z );
				}

				fe.MoveToWorld( loc, map );

				fe.Combatant = target;
			}
		}

		public override bool CanRummageCorpses{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Lethal; } }
		public override int TreasureMapLevel{ get{ return 3; } }
		public override bool BardImmune{ get{ return true; } }

		public ShimmeringEffusion( Serial serial ) : base( serial )
		{
		}

		public override int GetIdleSound()
		{
			return 0x1BF;
		}

		public override int GetAttackSound()
		{
			return 0x1C0;
		}

		public override int GetHurtSound()
		{
			return 0x1C1;
		}

		public override int GetDeathSound()
		{
			return 0x1C2;
		}


		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );

			writer.Write( m_TargetMap );
			writer.Write( m_GateLoc );
			writer.Write( m_Summon );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();

			m_TargetMap = reader.ReadMap();
			m_GateLoc = reader.ReadPoint3D();
			m_Summon = reader.ReadBool();
		}
	}
}