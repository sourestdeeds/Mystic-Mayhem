using System;
using System.Collections;
using Server;
using Server.Items;

namespace Server.Mobiles
{
	[CorpseName( "a Monstrous Interred Grizzle corpse" )]
	public class MonstrousInterredGrizzle : BaseCreature
	{
		[Constructable]
		public MonstrousInterredGrizzle() : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{
			Name = "a Monstrous Interred Grizzle";
			Body = 259;			
			BaseSoundID = 589;

			SetStr( 488, 620 );
			SetDex( 121, 170 );
			SetInt( 498, 657 );

			SetHits( 812, 1053 );

			SetDamage( 38, 48 );

			SetDamageType( ResistanceType.Physical, 25 );
			SetDamageType( ResistanceType.Energy, 75 );

			SetResistance( ResistanceType.Physical, 80, 90 );
			SetResistance( ResistanceType.Fire, 70, 80 );
			SetResistance( ResistanceType.Cold, 40, 50 );
			SetResistance( ResistanceType.Poison, 50, 60 );
			SetResistance( ResistanceType.Energy, 50, 60 );

			SetSkill( SkillName.EvalInt, 110.1, 120.0 );
			SetSkill( SkillName.Magery, 109.1, 115.0 );
			SetSkill( SkillName.Meditation, 90.1, 100.0 );
			SetSkill( SkillName.MagicResist, 120.5, 150.0 );
			SetSkill( SkillName.Tactics, 110.1, 120.0 );
			SetSkill( SkillName.Wrestling, 120.1, 150.0 );

			Fame = 24000;
			Karma = -24000;

			VirtualArmor = 80;
		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.FilthyRich, 2 );
			AddLoot( LootPack.MedScrolls, 2 );
		}
		public override void OnDeath( Container c )
		{
			if ( Utility.Random( 3 ) < 1 )
				c.DropItem( new GrizzledBones() );
			/*switch ( Utility.Random( 25 ))
			{
			case 0: c.DropItem( new BigElvenChair() ); break;
			case 1: c.DropItem( new ColorfulTapestry() ); break;
			case 2: c.DropItem( new DecorativeAcorn() ); break;
			case 3: c.DropItem( new ElvenAlchemyTable() ); break;
			case 4: c.DropItem( new ElvenBookshelf() ); break;
			case 5: c.DropItem( new ElvenBookStand() ); break;
			case 6: c.DropItem( new ElvenDresser() ); break;
			case 7: c.DropItem( new ElvenLoveSeat() ); break;
			case 8: c.DropItem( new ElvenReadingChair() ); break;
			case 9: c.DropItem( new ElvenStorageTable() ); break;
			case 10: c.DropItem( new ElvenTapestry() ); break;
			case 11: c.DropItem( new ElvenWallMap() ); break;
			case 12: c.DropItem( new ElvenWashBasin() ); break;
			case 13: c.DropItem( new FancyElvenArmoire() ); break;
			case 14: c.DropItem( new FancyElvenTable() ); break;
			case 15: c.DropItem( new FruitBowl() ); break;
			case 16: c.DropItem( new LargeGlowingBeetle() ); break;
			case 17: c.DropItem( new LargeGlowingBeetle2() ); break;
			case 18: c.DropItem( new LargeGlowingBeetle3() ); break;
			case 19: c.DropItem( new OrnateElvenBox() ); break;
			case 20: c.DropItem( new OrnateElvenChair() ); break;
			case 21: c.DropItem( new OrnateElvenChest() ); break;
			case 22: c.DropItem( new OrnateElvenTable() ); break;
			case 23: c.DropItem( new SimpleElvenArmoire() ); break;
			case 24: c.DropItem( new SmallElvenTapestry() ); break;

			}  */

			base.OnDeath( c );
		}

		public override int Meat{ get{ return 1; } }
		public override int TreasureMapLevel{ get{ return 5; } }

		public void DrainLife()
		{
			ArrayList list = new ArrayList();

			foreach ( Mobile m in this.GetMobilesInRange( 10 ) )
			{
				if ( m == this || !CanBeHarmful( m ) )
					continue;

				if ( m is BaseCreature && (((BaseCreature)m).Controled || ((BaseCreature)m).Summoned || ((BaseCreature)m).Team != this.Team) )
					list.Add( m );
				else if ( m.Player )
					list.Add( m );
			}

			foreach ( Mobile m in list )
			{
				DoHarmful( m );

				m.FixedParticles( 0x374A, 10, 15, 5013, 0x496, 0, EffectLayer.Waist );
				m.PlaySound( 0x231 );

				m.SendMessage( "Your Life is Mine to feed on!" );

				int toDrain = Utility.RandomMinMax( 10, 40 );

				Hits += toDrain;
				m.Damage( toDrain, this );
			}
		}

		public override void OnGaveMeleeAttack( Mobile defender )
		{
			base.OnGaveMeleeAttack( defender );

			if ( 0.1 >= Utility.RandomDouble() )
				DrainLife();
		}

		public override void OnGotMeleeAttack( Mobile attacker )
		{
			base.OnGotMeleeAttack( attacker );

			if ( 0.1 >= Utility.RandomDouble() )
				DrainLife();
		}

		public MonstrousInterredGrizzle( Serial serial ) : base( serial )
		{
		}		

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}
	}
}