using Server;
using Server.Items;
using Server.Mobiles;
using Server.Targeting;
using System.Collections;

namespace Server.Mobiles
{
[CorpseName( "a Cu Sidhe corpse" )]
	public class CuSidhe : BaseMount
	{
		[Constructable]
		public CuSidhe() : this( "a Cu Sidhe" )
		{
		}
		[Constructable]
		public CuSidhe( string name ) : base( name, 277, 0x3e91, AIType.AI_Melee, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{			
			BaseSoundID = 0xE5;
			//Hue = Utility.RandomList ( 1, 1174, 1153, 1456, 1170, 1360, 1109, 33, 1061, 1072, 1090, 1098, 1100, 1151, 1155, 1171, 1173, 1179 );
			Hue = Utility.RandomList ( 1, 1174, 1153, 1170, 1360, 1109, 33, 1072,    1151, 1155, 1173 );

			SetStr( 700, 725 );
			SetDex( 100, 110 );
			SetInt( 250, 285 );

			SetHits( 500, 515 );
			SetStam( 150, 170 );
			SetMana( 250, 285 );

			SetDamage( 26, 32 );

			SetDamageType( ResistanceType.Energy, 50 );
			SetDamageType( ResistanceType.Cold, 50 );			

			SetResistance( ResistanceType.Physical, 65, 75 );
			SetResistance( ResistanceType.Fire, 30, 45 );
			SetResistance( ResistanceType.Cold, 70, 85 );
			SetResistance( ResistanceType.Poison, 45, 50 );
			SetResistance( ResistanceType.Energy, 70, 85 );

			//SetSkill( SkillName.EvalInt, 130.4, 150.0 );
			SetSkill( SkillName.Anatomy, 77.7, 99.9 );
			SetSkill( SkillName.MagicResist, 76.0, 89.7 );
			SetSkill( SkillName.Tactics, 94.0, 97.6 );
			SetSkill( SkillName.Wrestling, 93.9, 99.9 );
			SetSkill( SkillName.Healing, 60.0, 70.0 );

			Fame = 14000;
			Karma = -14000;

			VirtualArmor = 75;

			Tamable = true;
			ControlSlots = 3;
			MinTameSkill = 104.1;
			
		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.Rich );			
		}

		public override int GetAngerSound()
		{
			if ( !Controled )
				return 0x16A;

			return base.GetAngerSound();
		}

		public override bool HasBreath{ get{ return true; } } // fire breath enabled
		public override int Meat{ get{ return 5; } }
		public override int Hides{ get{ return 10; } }
		public override HideType HideType{ get{ return HideType.Barbed; } }
		public override FoodType FavoriteFood{ get{ return FoodType.Meat; } }
		public override bool BardImmune{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Greater; } }		
		public override Poison HitPoison{ get{ return Poison.Lethal; } }
		

		public override WeaponAbility GetWeaponAbility()
		{
			switch ( Utility.Random( 3 ) )
			{
				default:
				case 0: return WeaponAbility.Dismount;
				case 1: return WeaponAbility.BleedAttack;
				case 2: return WeaponAbility.CrushingBlow;
			}
		}

		public CuSidhe( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );

			writer.Write( (int) 0 ); // version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();

			if ( BaseSoundID == 0x16A )
				BaseSoundID = 0xA8;
		}
	}
}