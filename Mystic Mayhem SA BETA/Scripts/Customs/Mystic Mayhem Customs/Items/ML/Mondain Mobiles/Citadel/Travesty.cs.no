using System;
using System.Collections;
using Server;
using Server.Items;
//using Server.Engines.CannedEvil;

namespace Server.Mobiles
{

	[CorpseName( "a travesty corpse" )]
	public class Travesty : BaseCreature
	{
		public override bool IsScaredOfScaryThings{ get{ return false; } }
		public override bool IsScaryToPets{ get{ return true; } }
		private int m_HoldHits;

		private Map m_TargetMap;
		private Point3D m_GateLoc;
		private bool m_summon;

		[CommandProperty( AccessLevel.GameMaster )]
		public Map TargetMap
		{
			get{ return m_TargetMap; }
			set{ m_TargetMap = value; }
		}

		[CommandProperty( AccessLevel.GameMaster )]
		public Point3D GateLoc
		{
			get{ return m_GateLoc; }
			set{ m_GateLoc = value; }
		}


		[CommandProperty( AccessLevel.GameMaster )]
		public bool summon
		{
			get{ return m_summon; }
			set{ m_summon = value; }
		}

		[Constructable]
		public Travesty() : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{
			Name = "travesty";
			Body = 264;
			BaseSoundID = 0x451;

			SetStr( 600, 800 );
			SetDex( 140, 190 );
			SetInt( 800, 900 );
			SetMana( 600, 800 );

			SetHits( 15000 );
			SetStam( 202, 400 );

			SetDamage( 30, 40 );

			SetDamageType( ResistanceType.Physical, 60 );
			SetDamageType( ResistanceType.Cold, 40 );

			SetResistance( ResistanceType.Physical, 90 );
			SetResistance( ResistanceType.Fire, 75 );
			SetResistance( ResistanceType.Cold, 85 );
			SetResistance( ResistanceType.Poison, 85 );
			SetResistance( ResistanceType.Energy, 75 );

			SetSkill( SkillName.Chivalry, 120.0 );
			SetSkill( SkillName.EvalInt, 200.0 );
			SetSkill( SkillName.Magery, 160.0 );
			SetSkill( SkillName.Meditation, 120.0 );
			SetSkill( SkillName.MagicResist, 120.0 );
			SetSkill( SkillName.Tactics, 100.0 );
			SetSkill( SkillName.Wrestling, 100.0 );

			Fame = 25000;
			Karma = -25000;

			VirtualArmor = 84;
			m_HoldHits = Hits;

		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.UltraRich, 4 );
		}

		public override void OnDeath( Container c )
		{
			//if ( Utility.Random( 3 ) < 1 )
				c.DropItem( new EyeOfTheTravesty() );

	 		if( Utility.Random( 8 ) < 2 ) 
			switch ( Utility.Random( 20 )) 
			{ 
		//		case 0: c.DropItem( new PowerScroll( SkillName.Blacksmith, 120 ) ); break; 
		//		case 1: c.DropItem( new PowerScroll( SkillName.Tailoring, 120 ) ); break;  
				case 2: c.DropItem( new PowerScroll( SkillName.Tinkering, 120 ) ); break; 
				case 3: c.DropItem( new PowerScroll( SkillName.Mining, 120 ) ); break;  
				case 4: c.DropItem( new PowerScroll( SkillName.Carpentry, 120 ) ); break;  
				case 5: c.DropItem( new PowerScroll( SkillName.Alchemy, 120 ) ); break; 
				case 6: c.DropItem( new PowerScroll( SkillName.Fletching, 120 ) ); break; 
				case 7: c.DropItem( new PowerScroll( SkillName.Inscribe, 120 ) ); break;  
				case 8: c.DropItem( new PowerScroll( SkillName.Cartography, 120 ) ); break;  
				case 9: c.DropItem( new PowerScroll( SkillName.Tinkering, 120 ) ); break;  
				case 10: c.DropItem( new PowerScroll( SkillName.Blacksmith, 115 ) ); break; 
				case 11: c.DropItem( new PowerScroll( SkillName.Tailoring, 115 ) ); break;  
				case 12: c.DropItem( new PowerScroll( SkillName.Tinkering, 115 ) ); break; 
				case 13: c.DropItem( new PowerScroll( SkillName.Mining, 115 ) ); break;  
				case 14: c.DropItem( new PowerScroll( SkillName.Carpentry, 115 ) ); break;  
				case 15: c.DropItem( new PowerScroll( SkillName.Alchemy, 115 ) ); break; 
				case 16: c.DropItem( new PowerScroll( SkillName.Fletching, 115 ) ); break; 
				case 17: c.DropItem( new PowerScroll( SkillName.Inscribe, 115 ) ); break;  
				case 18: c.DropItem( new PowerScroll( SkillName.Cartography, 115 ) ); break;  
				case 19: c.DropItem( new PowerScroll( SkillName.Tinkering, 115 ) ); break;
      			}
			if (m_summon)
				ClearGate( GateLoc.X, GateLoc.Y, GateLoc.Z, TargetMap );
			base.OnDeath( c );
		}

		private static Queue m_ToDelete = new Queue();
		public static void ClearGate( int x, int y, int z, Map map )
		{
			IPooledEnumerable eable = map.GetItemsInRange( new Point3D( x, y, z ), 0 );

			foreach ( Item item in eable )
			{
				if ( item is Moongate && item.Z == z )
					m_ToDelete.Enqueue( item );
			}

			eable.Free();

			while ( m_ToDelete.Count > 0 )
					((Item)m_ToDelete.Dequeue()).Delete();
		}

		public override int GetIdleSound()
		{
			return 0x2CE;
		}

		public override int GetDeathSound()
		{
			return 0x2C1;
		}

		public override int GetHurtSound()
		{
			return 0x2D1;
		}

		public override int GetAttackSound()
		{
			return 0x2C8;
		}

		public override void OnGotMeleeAttack( Mobile attacker )
		{
			base.OnGotMeleeAttack( attacker );

			if ( 0.2 > Utility.RandomDouble() && attacker is BaseCreature )
			{
				BaseCreature c = (BaseCreature)attacker;

				if ( c.Controlled && c.ControlMaster != null )
				{
					c.ControlTarget = c.ControlMaster;
					c.ControlOrder = OrderType.Attack;
					c.Combatant = c.ControlMaster;
				}
			}
		}
		public override void OnGaveMeleeAttack( Mobile defender )
		{
			base.OnGaveMeleeAttack( defender );

			if ( 0.2 > Utility.RandomDouble() )
				defender.Combatant = null;
		}

		public override void OnDamagedBySpell( Mobile from )
		{
			if ( Hits < (HitsMax / 2) && m_HoldHits > HitsMax / 2 )
			{
				SpecialMoves ( from );
			}
			else if ( Hits < (HitsMax / 5) && m_HoldHits > HitsMax / 5 )  //from is PlayerMobile &&  
			{
				SpecialMoves ( from );
			}
			m_HoldHits = Hits;
		}

		public void SpecialMoves( Mobile m )
		{

			SpawnAssassin( m );
			SpawnMage( m );

			if ( Hits < (HitsMax / 5) )
			{
				Map map = this.Map;

				if ( map != null )
				{
					// try 10 times to find a teleport spot
					for ( int i = 0; i < 10; ++i )
					{
						int x = (Utility.RandomMinMax( 67, 106 ) );
						int y = (Utility.RandomMinMax( 1936, 1974 ) );
						int z = Z;

						if ( !map.CanFit( x, y, z, 16, false, false ) )
							continue;

						Point3D from = this.Location;
						Point3D to = new Point3D( x, y, z );

						if ( !InLOS( to ) )
							continue;

						this.Location = to;
						this.ProcessDelta();
						//this.Hidden = true;
						this.Combatant = null;

						Effects.SendLocationParticles( EffectItem.Create( from, map, EffectItem.DefaultDuration ), 0x3728, 10, 10, 2023 );
						Effects.SendLocationParticles( EffectItem.Create(   to, map, EffectItem.DefaultDuration ), 0x3728, 10, 10, 5023 );

						Effects.PlaySound( to, map, 0x1FE );

						//m_HasTeleportedAway = true;
						//m_SoundTimer = Timer.DelayCall( TimeSpan.FromSeconds( 5.0 ), TimeSpan.FromSeconds( 2.5 ), new TimerCallback( SendTrackingSound ) );

						//Frozen = true;

						break;
					}
				}
			}

		}

		public void SpawnMage( Mobile target )
		{
			Map map = this.Map;

			if ( map == null )
				return;

			int newMage = Utility.RandomMinMax( 4, 6 ); //3 6

			for ( int i = 0; i < newMage; ++i )
			{
				NinjaMage mage = new NinjaMage();

				mage.Team = this.Team;

				bool validLocation = false;
				Point3D loc = this.Location;

				for ( int j = 0; !validLocation && j < 10; ++j )
				{
					int x = X + Utility.Random( 6 ) - 1;
					int y = Y + Utility.Random( 6 ) - 1;
					int z = map.GetAverageZ( x, y );

					if ( validLocation = map.CanFit( x, y, this.Z, 16, false, false ) )
						loc = new Point3D( x, y, Z );
					else if ( validLocation = map.CanFit( x, y, z, 16, false, false ) )
						loc = new Point3D( x, y, z );
				}

				mage.MoveToWorld( loc, map );
				mage.Combatant = target;
			}
		}

		public void SpawnAssassin( Mobile target )
		{
			Map map = this.Map;

			if ( map == null )
				return;

			int newAssassin = Utility.RandomMinMax( 4, 6 ); //3 6

			for ( int i = 0; i < newAssassin; ++i )
			{
				Assassin assassin = new Assassin();

				assassin.Team = this.Team;

				bool validLocation = false;
				Point3D loc = this.Location;

				for ( int j = 0; !validLocation && j < 10; ++j )
				{
					int x = X + Utility.Random( 6 ) - 1;
					int y = Y + Utility.Random( 6 ) - 1;
					int z = map.GetAverageZ( x, y );

					if ( validLocation = map.CanFit( x, y, this.Z, 16, false, false ) )
						loc = new Point3D( x, y, Z );
					else if ( validLocation = map.CanFit( x, y, z, 16, false, false ) )
						loc = new Point3D( x, y, z );
				}

				assassin.MoveToWorld( loc, map );
				assassin.Combatant = target;
			}
		}


		public override bool BardImmune{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Lethal; } }
		public override bool AutoDispel{ get{ return true; } }

		public Travesty( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );

			writer.Write( m_TargetMap );
			writer.Write( m_GateLoc );
			writer.Write( m_summon );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();

			m_TargetMap = reader.ReadMap();
			m_GateLoc = reader.ReadPoint3D();
			m_summon = reader.ReadBool();

			switch ( version )
			{
				case 0:
				{
					//m_Timer = new TeleportTimer( this );
					//m_Timer.Start();

					break;
				}
			}


			if ( BaseSoundID == 357 )
				BaseSoundID = -1;
		}
	}
}