using System;
using System.Collections;
using Server;
using Server.Items;
using Server.Factions;

namespace Server.Mobiles
{
	[CorpseName( "a Chief Paroxysmus" )]
	public class ChiefParoxysmus: BaseCreature
	{
		public override double DispelDifficulty{ get{ return 125.0; } }
		public override double DispelFocus{ get{ return 45.0; } }

		private Map m_TargetMap;
		private Point3D m_GateLoc;
		private bool m_Summon;

		private Timer m_Timer;

		[CommandProperty( AccessLevel.GameMaster )]
		public Map TargetMap
		{
			get{ return m_TargetMap; }
			set{ m_TargetMap = value; }
		}

		[CommandProperty( AccessLevel.GameMaster )]
		public Point3D GateLoc
		{
			get{ return m_GateLoc; }
			set{ m_GateLoc = value; }
		}


		[CommandProperty( AccessLevel.GameMaster )]
		public bool Summon
		{
			get{ return m_Summon; }
			set{ m_Summon = value; }
		}		

		[Constructable]
		public ChiefParoxysmus  () : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{
			Name = "Chief Paroxysmus " ;
			Body = 256;
			BaseSoundID = 357;

			SetStr( 760, 950 );
			SetDex( 176, 295 );
			SetInt( 310, 450 );

			SetHits( 30860, 31930 );

			SetDamage( 40, 48 );

			SetDamageType( ResistanceType.Cold, 100 );
			SetDamageType( ResistanceType.Poison, 100 );

			SetResistance( ResistanceType.Physical, 75, 82 );
			SetResistance( ResistanceType.Fire, 65, 78 );
			SetResistance( ResistanceType.Cold, 80, 82 );
			SetResistance( ResistanceType.Poison, 95 );
			SetResistance( ResistanceType.Energy, 75, 82 );

			SetSkill( SkillName.EvalInt, 90.1, 110.0 );
			SetSkill( SkillName.Magery, 90.1, 100.0 );
			SetSkill( SkillName.MagicResist, 85.1, 95.0 );
			SetSkill( SkillName.Tactics, 90.1, 110.0 );
			SetSkill( SkillName.Wrestling, 80.1, 110.0 );
			SetSkill( SkillName.Poisoning, 80.1, 110.0 );

			Fame = 23000;
			Karma = -23000;

			VirtualArmor = 58;
			ControlSlots = 5;

			m_Timer = new TeleportTimer( this );
			m_Timer.Start();
			PackItem( new Silver( 20, 30 ) );

		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.AosUltraRich );
			AddLoot( LootPack.AosSuperBoss, 3 );
		}
		public override void OnDeath( Container c )
		{
			if ( Utility.Random( 2 ) < 1 )
				c.DropItem( new LardOfParoxysmus() );

		/*	if ( Utility.Random( 30 ) < 1 )
				c.DropItem( new SpellbookBasket() );

			if ( Utility.Random( 3 ) < 1 )
				PackItem( new GemPouch() );  */

			if (m_Summon)
				ClearGate( GateLoc.X, GateLoc.Y, GateLoc.Z, TargetMap );
			base.OnDeath( c );
		}
		private static Queue m_ToDelete = new Queue();
		public static void ClearGate( int x, int y, int z, Map map )
		{
			IPooledEnumerable eable = map.GetItemsInRange( new Point3D( x, y, z ), 0 );

			foreach ( Item item in eable )
			{
				if ( item is Moongate && item.Z == z )
					m_ToDelete.Enqueue( item );
			}

			eable.Free();

			while ( m_ToDelete.Count > 0 )
					((Item)m_ToDelete.Dequeue()).Delete();
		}

		private class TeleportTimer : Timer
		{
			private Mobile m_Owner;

			private static int[] m_Offsets = new int[]
			{
				-1, -1,
				-1,  0,
				-1,  1,
				0, -1,
				0,  1,
				1, -1,
				1,  0,
				1,  1
			};

			public TeleportTimer( Mobile owner ) : base( TimeSpan.FromSeconds( 5.0 ), TimeSpan.FromSeconds( 5.0 ) )
			{
				m_Owner = owner;
			}

			protected override void OnTick()
			{
				if ( m_Owner.Deleted )
				{
					Stop();
					return;
				}

				Map map = m_Owner.Map;

				if ( map == null )
					return;

				if ( 0.25 < Utility.RandomDouble() )
					return;

				Mobile toTeleport = null;

				foreach ( Mobile m in m_Owner.GetMobilesInRange( 16 ) )
				{
					if ( m != m_Owner && m.Player && m_Owner.CanBeHarmful( m ) && m_Owner.CanSee( m ) )
					{
						toTeleport = m;
						break;
					}
				}

				if ( toTeleport != null )
				{
					int offset = Utility.Random( 8 ) * 2;

					Point3D to = m_Owner.Location;

					for ( int i = 0; i < m_Offsets.Length; i += 2 )
					{
						int x = m_Owner.X + m_Offsets[(offset + i) % m_Offsets.Length];
						int y = m_Owner.Y + m_Offsets[(offset + i + 1) % m_Offsets.Length];

						if ( map.CanSpawnMobile( x, y, m_Owner.Z ) )
						{
							to = new Point3D( x, y, m_Owner.Z );
							break;
						}
						else
						{
							int z = map.GetAverageZ( x, y );

							if ( map.CanSpawnMobile( x, y, z ) )
							{
								to = new Point3D( x, y, z );
								break;
							}
						}
					}

					Mobile m = toTeleport;

					Point3D from = m.Location;

					m.Location = to;

					Server.Spells.SpellHelper.Turn( m_Owner, toTeleport );
					Server.Spells.SpellHelper.Turn( toTeleport, m_Owner );

					m.ProcessDelta();

					Effects.SendLocationParticles( EffectItem.Create( from, m.Map, EffectItem.DefaultDuration ), 0x3728, 10, 10, 2023 );
					Effects.SendLocationParticles( EffectItem.Create(   to, m.Map, EffectItem.DefaultDuration ), 0x3728, 10, 10, 5023 );

					m.PlaySound( 0x1FE );

					m_Owner.Combatant = toTeleport;
				}
			}
		}


		public override bool CanRummageCorpses{ get{ return true; } }
		public override bool HasBreath{ get{ return true; } } // fire breath enabled
		public override int Meat{ get{ return 5; } }
		public override int Hides{ get{ return 10; } }
		public override HideType HideType{ get{ return HideType.Barbed; } }

		public override bool BardImmune{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Lethal; } }		
		public override Poison HitPoison{ get{ return Poison.Lethal; } }

		
		public ChiefParoxysmus ( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );

			writer.Write( m_TargetMap );
			writer.Write( m_GateLoc );
			writer.Write( m_Summon );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();

			m_TargetMap = reader.ReadMap();
			m_GateLoc = reader.ReadPoint3D();
			m_Summon = reader.ReadBool();

			m_Timer = new TeleportTimer( this );
			m_Timer.Start();
		}
	}
}
