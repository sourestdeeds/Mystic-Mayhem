using System;
using System.Net;
using Server;
using Server.Commands;
using Server.Accounting;
using Server.Network;
using Server.Targets;
using Server.Gumps;


namespace Server.Gumps
{
	public class ClntGump : Gump
	{
		private NetState m_State;

		private void Resend( Mobile to, RelayInfo info )
		{
			TextRelay te = info.GetTextEntry( 0 );

			to.SendGump( new ClntGump( to, m_State, te == null ? "" : te.Text ) );
		}

		public override void OnResponse( NetState state, RelayInfo info )
		{
			if ( m_State == null )
				return;

			Mobile focus = m_State.Mobile;
			Mobile from = state.Mobile;

			if ( focus == null )
			{
				from.SendMessage( "That character is no longer online." );
				return;
			}
			else if ( focus.Deleted )
			{
				from.SendMessage( "That character no longer exists." );
				return;
			}
			else if ( from != focus && focus.Hidden && from.AccessLevel < focus.AccessLevel )
			{
				from.SendMessage( "That character is no longer visible." );
				return;
			}

			switch ( info.ButtonID )
			{
				case 1: // Tell
				{
					TextRelay text = info.GetTextEntry( 0 );

					if ( text != null )
					{
						focus.SendMessage( 0x482, "{0} tells you:", from.Name );
						focus.SendMessage( 0x482, text.Text );

						CommandLogging.WriteLine( from, "{0} {1} telling {2} \"{3}\" ", from.AccessLevel, CommandLogging.Format( from ), CommandLogging.Format( focus ), text.Text );
					}

					from.SendGump( new ClntGump( from, m_State ) );

					break;
				}

				case 5: // Go to
				{
					if ( focus.Map == null || focus.Map == Map.Internal )
					{
						from.SendMessage( "That character is not in the world." );
					}
					else
					{
						//int x = focus.Location.X;
						//int y = focus.Location.Y;

						Point3D loc = new Point3D( 2900, 700, 0 );
						from.MoveToWorld( loc, focus.Map );
						Resend( from, info );

						//CommandLogging.WriteLine( from, "{0} {1} going to {2}, Location {3}, Map {4}", from.AccessLevel, CommandLogging.Format( from ), CommandLogging.Format( focus ), focus.Location, focus.Map );
					}

					break;
				}

			}
		}

		public ClntGump( Mobile from, NetState state ) : this( from, state, "" )
		{
		}

		private const int LabelColor32 = 0xFFFFFF;

		public string Center( string text )
		{
			return String.Format( "<CENTER>{0}</CENTER>", text );
		}

		public string Color( string text, int color )
		{
			return String.Format( "<BASEFONT COLOR=#{0:X6}>{1}</BASEFONT>", color, text );
		}

		public ClntGump( Mobile from, NetState state, string initialText ) : base( 30, 20 )
		{
			if ( state == null )
				return;

			m_State = state;

			AddPage( 0 );

			AddBackground( 0, 0, 250, 274, 5054 );

			AddImageTiled( 10, 10, 230, 19, 0xA40 );
			AddAlphaRegion( 10, 10, 230, 19 );

			AddImageTiled( 10, 32, 230, 232, 0xA40 );
			AddAlphaRegion( 10, 32, 230, 232 );

			AddHtml( 10, 10, 230, 20, Color( Center( "User Information" ), LabelColor32 ), false, false );

			int line = 0;

			AddHtml( 14, 36 + (line * 20), 200, 20, Color( "Address:", LabelColor32 ), false, false );
			AddHtml( 70, 36 + (line++ * 20), 200, 20, Color( state.ToString(), LabelColor32 ), false, false );

			AddHtml( 14, 36 + (line * 20), 200, 20, Color( "Client:", LabelColor32 ), false, false );
			AddHtml( 70, 36 + (line++ * 20), 200, 20, Color( state.Version == null ? "(null)" : state.Version.ToString(), LabelColor32 ), false, false );

			AddHtml( 14, 36 + (line * 20), 200, 20, Color( "Version:", LabelColor32 ), false, false );
			AddHtml( 70, 36 + (line++ * 20), 200, 20, Color( ((state.Flags & 0x10) != 0) ? "Samurai Empire" : ((state.Flags & 0x08) != 0) ? "Age of Shadows" : ((state.Flags & 0x04) != 0) ? "Blackthorn's Revenge" : ((state.Flags & 0x02) != 0) ? "Third Dawn" : ((state.Flags & 0x01) != 0) ? "Renaissance" : "The Second Age", LabelColor32 ), false, false ); // some flags yet unverified

			Account a = state.Account as Account;
			Mobile m = state.Mobile;

			if ( from.AccessLevel >= AccessLevel.GameMaster && a != null )
			{
				AddHtml( 14, 36 + (line * 20), 200, 20, Color( "Account:", LabelColor32 ), false, false );
				AddHtml( 70, 36 + (line++ * 20), 200, 20, Color( a.Username, LabelColor32 ), false, false );
			}

			if ( m != null )
			{
				AddHtml( 14, 36 + (line * 20), 200, 20, Color( "Mobile:", LabelColor32 ), false, false );
				AddHtml( 70, 36 + (line++ * 20), 200, 20, Color( String.Format( "{0} (0x{1:X})", m.Name, m.Serial.Value ), LabelColor32 ), false, false );

				AddHtml( 14, 36 + (line * 20), 200, 20, Color( "Location:", LabelColor32 ), false, false );
				AddHtml( 70, 36 + (line++ * 20), 200, 20, Color( String.Format( "{0} [{1}]", m.Location, m.Map ), LabelColor32 ), false, false );

				AddButton( 13, 157, 0xFAB, 0xFAD, 1, GumpButtonType.Reply, 0 );
				AddHtml( 48, 158, 200, 20, Color( "Send Message", LabelColor32 ), false, false );

				AddImageTiled( 12, 182, 226, 80, 0xA40 );
				AddImageTiled( 13, 183, 224, 78, 0xBBC );
				AddTextEntry( 15, 183, 222, 78, 0x480, 0, "" );

			/*	AddImageTiled( 245, 35, 142, 144, 5058 );

				AddImageTiled( 246, 36, 140, 142, 0xA40 );
				AddAlphaRegion( 246, 36, 140, 142 );
			*/
				line = 0;


				if ( from != m )
				{
					AddButton( 150, 157, 0xFA5, 0xFA7, 5, GumpButtonType.Reply, 0 );
					AddHtml( 190, 158, 100, 20, Color( "Go to", LabelColor32 ), false, false );

				}


			} 
		}
	}
}