using Server;
using Server.Items;
using Server.Mobiles;
using Server.Targeting;
using System;
using System.Collections;

namespace Server.Mobiles
{
[CorpseName( "a mange wolf corpse" )]
	public class MangeWolf : BaseMount
	{
		private DateTime m_Delay = DateTime.Now;

		[Constructable]
		public MangeWolf() : this( "a Mange Wolf" )
		{
		}
		[Constructable]
		public MangeWolf( string name ) : base( name, 277, 0x3e91, AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{			
			BaseSoundID = 0xE5;

			Hue = 1117;

			SetStr( 105, 125 );
			SetDex( 86, 120 );
			SetInt( 45, 65 );

			SetHits( 120, 140 );

			SetDamage( 21, 27 );

			SetDamageType( ResistanceType.Physical, 100 );

			SetResistance( ResistanceType.Physical, 30, 40 );
			SetResistance( ResistanceType.Fire, 20, 30 );
			SetResistance( ResistanceType.Cold, 15, 25 );
			SetResistance( ResistanceType.Poison, 15, 25 );
			SetResistance( ResistanceType.Energy, 25, 35 );

			SetSkill( SkillName.EvalInt, 90.4, 100.0 );
			SetSkill( SkillName.Magery, 90.9, 103.0 );
			SetSkill( SkillName.MagicResist, 75.3, 88.0 );
			SetSkill( SkillName.Tactics, 77.6, 89.3 );
			SetSkill( SkillName.Wrestling, 90.5, 102.5 );

			Fame = 4500;
			Karma = -4500;

			VirtualArmor = 45;

			Tamable = true;
			ControlSlots = 2;
			MinTameSkill = 75.1;

			PackGold( 45, 80 );
		}
		public override void OnDeath( Container c )
		{

			if ( Utility.RandomDouble() <= 0.04 )
				c.DropItem( new HoundDeed() );
 
			base.OnDeath( c );
		}


		public override void GenerateLoot()
		{
			AddLoot( LootPack.Rich );			
		}

		public override int GetAngerSound()
		{
			if ( !Controlled )
				return 0x16A;
			else
				return 0x579; //Notice sound.

		//	return base.GetAngerSound();
		}
		public override int GetDeathSound()
		{
			return 0x576;
		}
		public override int GetAttackSound()
		{
			return 0x577;
		}
		public override int GetIdleSound()
		{
			return 0x578;
		}
		public override int GetHurtSound()
		{
			return 0x57A;
		}


		public override bool BardImmune{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Regular; } }		
		public override FoodType FavoriteFood{ get{ return FoodType.Meat; } }
		public override PackInstinct PackInstinct{ get{ return PackInstinct.Canine; } }
		

		public override WeaponAbility GetWeaponAbility()
		{
			switch ( Utility.Random( 3 ) )
			{
				default:
				case 0: return WeaponAbility.Dismount;
				case 1: return WeaponAbility.BleedAttack;
				case 2: return WeaponAbility.CrushingBlow;
			}
		}

		public MangeWolf( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );

			writer.Write( (int) 0 ); // version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();

			if ( BaseSoundID == 0x16A )
				BaseSoundID = 0xA8;
		}
	}
}