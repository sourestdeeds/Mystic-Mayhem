using Server;
using Server.Items;
using Server.Mobiles;
using Server.Targeting;
using Server.Spells;
using Server.Spells.Seventh;
using Server.Spells.Fifth;
using System;
using System.Collections;

namespace Server.Mobiles
{
[CorpseName( "a Junkyard Dog corpse" )]
	public class HaazenDog : BaseCreature
	{
		public override bool IsScaredOfScaryThings{ get{ return false; } }
		public override bool IsScaryToPets{ get{ return true; } }
		public override double BreathDamageScalar{ get{ return (0.01); } }

		private DateTime m_Delay = DateTime.Now;

		[Constructable]
		public HaazenDog( ) : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 )
		{			
			BaseSoundID = 0xE5;
			Name = "Haazen's Junkyard Dog";
			Body = 277;

			Hue = 1141; //2;

			SetStr( 450, 500 );
			SetDex( 725, 775 );
			SetInt( 725, 775 );

			SetHits( 25000 );

			SetDamage( 66, 82 );

			SetDamageType( ResistanceType.Physical, 70 );
			SetDamageType( ResistanceType.Cold, 30 );			

			SetResistance( ResistanceType.Physical, 75, 85 );
			SetResistance( ResistanceType.Fire, 65, 75 );
			SetResistance( ResistanceType.Cold, 90 );
			SetResistance( ResistanceType.Poison, 90 );
			SetResistance( ResistanceType.Energy, 75, 85 );

			SetSkill( SkillName.EvalInt, 250.0 ); // 200
			SetSkill( SkillName.Magery, 200.0 );
			SetSkill( SkillName.Meditation, 200.0 );
			SetSkill( SkillName.Anatomy, 300.0 );
			SetSkill( SkillName.Wrestling, 200.0 );
			SetSkill( SkillName.MagicResist, 1000.0 );
			SetSkill( SkillName.Tactics, 300.0 );

			Fame = 25000;
			Karma = -25000;

			VirtualArmor = 80;

			Tamable = false;
		//	ActiveSpeed = 0.1;
		//	PassiveSpeed = 0.2;

		//	PackItem( new Bandage( Utility.RandomMinMax( 1, 15 ) ) );
			
		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.FilthyRich, 1 );

			AddLoot( LootPack.Gems, Utility.Random( 5, 10 ) );
		}
		public override void OnDeath( Container c )
		{

			c.DropItem( new Gold( 8000, 10000 ) );
		/*	int amt = Utility.Random( 10, 20 );
			switch ( Utility.Random( 4 ) )
			{
				case 0: c.DropItem( new ArmageddonHides( amt ) ); break;
				case 1: c.DropItem( new FrostHides( amt ) ); break;
				case 2: c.DropItem( new VulconHides( amt ) ); break;
				case 3: c.DropItem( new AquasHides( amt ) ); break;
			} */

			if ( Utility.RandomDouble() <= 0.05 )
				c.DropItem( new ShieldOfSalvation() );

			if ( Utility.RandomDouble() <= 0.25 )
				c.DropItem( new HoundDeed() );
 
			switch ( Utility.Random( 330 )) 
			{ 
			//	case 0: 				c.DropItem( new PowerScroll( SkillName.Blacksmith, 120 ) ); break;  
			//	case 1: case 2: 			c.DropItem( new PowerScroll( SkillName.Blacksmith, 115 ) ); break; 
			//	case 3: case 4: case 5: 		c.DropItem( new PowerScroll( SkillName.Blacksmith, 110 ) ); break; 
				case 6: case 7: case 8: case 9: 	c.DropItem( new PowerScroll( SkillName.Blacksmith, 105 ) ); break; 
  
			//	case 10: 				c.DropItem( new PowerScroll( SkillName.Tailoring, 120 ) ); break;  
			//	case 11: case 12: 			c.DropItem( new PowerScroll( SkillName.Tailoring, 115 ) ); break; 
			//	case 13: case 14: case 15: 		c.DropItem( new PowerScroll( SkillName.Tailoring, 110 ) ); break; 
				case 16: case 17: case 18: case 19: 	c.DropItem( new PowerScroll( SkillName.Tailoring, 105 ) ); break;  

				case 20: 				c.DropItem( new PowerScroll( SkillName.Tinkering, 120 ) ); break;  
				case 21: case 22: 			c.DropItem( new PowerScroll( SkillName.Tinkering, 115 ) ); break; 
				case 23: case 24: case 25: 		c.DropItem( new PowerScroll( SkillName.Tinkering, 110 ) ); break; 
				case 26: case 27: case 28: case 29: 	c.DropItem( new PowerScroll( SkillName.Tinkering, 105 ) ); break; 
  
				case 30: 				c.DropItem( new PowerScroll( SkillName.Mining, 120 ) ); break;  
				case 31: case 32: 			c.DropItem( new PowerScroll( SkillName.Mining, 115 ) ); break; 
				case 33: case 34: case 35: 		c.DropItem( new PowerScroll( SkillName.Mining, 110 ) ); break; 
				case 36: case 37: case 38: case 39: 	c.DropItem( new PowerScroll( SkillName.Mining, 105 ) ); break;
 
				case 40: 				c.DropItem( new PowerScroll( SkillName.Carpentry, 120 ) ); break;  
				case 41: case 42: 			c.DropItem( new PowerScroll( SkillName.Carpentry, 115 ) ); break; 
				case 43: case 44: case 45: 		c.DropItem( new PowerScroll( SkillName.Carpentry, 110 ) ); break; 
				case 46: case 47: case 48: case 49: 	c.DropItem( new PowerScroll( SkillName.Carpentry, 105 ) ); break; 

				case 50: 				c.DropItem( new PowerScroll( SkillName.Alchemy, 120 ) ); break;  
				case 51: case 52: 			c.DropItem( new PowerScroll( SkillName.Alchemy, 115 ) ); break; 
				case 53: case 54: case 55: 		c.DropItem( new PowerScroll( SkillName.Alchemy, 110 ) ); break; 
				case 56: case 57: case 58: case 59: 	c.DropItem( new PowerScroll( SkillName.Alchemy, 105 ) ); break; 

				case 60: 				c.DropItem( new PowerScroll( SkillName.Fletching, 120 ) ); break;  
				case 61: case 62: 			c.DropItem( new PowerScroll( SkillName.Fletching, 115 ) ); break; 
				case 63: case 64: case 65: 		c.DropItem( new PowerScroll( SkillName.Fletching, 110 ) ); break; 
				case 66: case 67: case 68: case 69: 	c.DropItem( new PowerScroll( SkillName.Fletching, 105 ) ); break;

				case 70: 				c.DropItem( new PowerScroll( SkillName.Inscribe, 120 ) ); break;  
				case 71: case 72: 			c.DropItem( new PowerScroll( SkillName.Inscribe, 115 ) ); break; 
				case 73: case 74: case 75: 		c.DropItem( new PowerScroll( SkillName.Inscribe, 110 ) ); break; 
				case 76: case 77: case 78: case 79: 	c.DropItem( new PowerScroll( SkillName.Inscribe, 105 ) ); break;
  
				case 80: 				c.DropItem( new PowerScroll( SkillName.Cartography, 120 ) ); break;  
				case 81: case 82: 			c.DropItem( new PowerScroll( SkillName.Cartography, 115 ) ); break; 
				case 83: case 84: case 85: 		c.DropItem( new PowerScroll( SkillName.Cartography, 110 ) ); break; 
				case 86: case 87: case 88: case 89: 	c.DropItem( new PowerScroll( SkillName.Cartography, 105 ) ); break;

				case 90: 				c.DropItem( new PowerScroll( SkillName.Tinkering, 120 ) ); break;  
				case 91: case 92: 			c.DropItem( new PowerScroll( SkillName.Tinkering, 115 ) ); break; 
				case 93: case 94: case 95: 		c.DropItem( new PowerScroll( SkillName.Tinkering, 110 ) ); break; 
				case 96: case 97: case 98: case 99: 	c.DropItem( new PowerScroll( SkillName.Tinkering, 105 ) ); break;

				case 100: 				c.DropItem( new PowerScroll( SkillName.Cooking, 120 ) ); break;  
				case 101: case 102: 			c.DropItem( new PowerScroll( SkillName.Cooking, 115 ) ); break; 
				case 103: case 104: case 105: 		c.DropItem( new PowerScroll( SkillName.Cooking, 110 ) ); break; 
				case 106: case 107: case 108: case 109: c.DropItem( new PowerScroll( SkillName.Cooking, 105 ) ); break; 
      			}
			base.OnDeath( c );
		}

		public void Polymorph( Mobile m )
		{
			if ( !m.CanBeginAction( typeof( PolymorphSpell ) ) || !m.CanBeginAction( typeof( IncognitoSpell ) ) || m.IsBodyMod )
				return;

			IMount mount = m.Mount;
			if ( m is Clone )
				return;

			if ( mount != null )
				mount.Rider = null;

			if ( m.Mounted )
				return;

			if ( m.BeginAction( typeof( PolymorphSpell ) ) )
			{
				Item disarm = m.FindItemOnLayer( Layer.OneHanded );

				if ( disarm != null && disarm.Movable )
					m.AddToBackpack( disarm );

				disarm = m.FindItemOnLayer( Layer.TwoHanded );

				if ( disarm != null && disarm.Movable )
					m.AddToBackpack( disarm );

				m.BodyMod = Utility.RandomList( 94, 51 );//, 261, 260 );
				m.HueMod = Utility.Random( 2, 100 );//SlimeHue();
				m.SendMessage (68, "Now you are a puddle of gooo");

				new ExpirePolymorphTimer( m ).Start();
			}
		}

		private class ExpirePolymorphTimer : Timer
		{
			private Mobile m_Owner;

			public ExpirePolymorphTimer( Mobile owner ) : base( TimeSpan.FromMinutes( 1.0 ) )
			{
				m_Owner = owner;

				Priority = TimerPriority.OneSecond;
			}

			protected override void OnTick()
			{
				if ( !m_Owner.CanBeginAction( typeof( PolymorphSpell ) ) )
				{
					m_Owner.BodyMod = 0;
					m_Owner.HueMod = -1;
					m_Owner.EndAction( typeof( PolymorphSpell ) );
				}
			}
		}
		public void DoSpecialAbility( Mobile target )
		{
			this.ActiveSpeed = 0.1;
			this.PassiveSpeed = 0.2;

			switch ( Utility.Random( 16 ) )
			{
				case 0: case 1: case 2: Polymorph( target ); break;
				case 6: case 7: case 8: TeleportTarget( target ); break;
				case 15: TeleportMe( this ); break;
			}

		}
		public override void OnDamagedBySpell( Mobile attacker )
		{
			switch ( Utility.Random( 5 ) )
			{
				case 2: DrainLife(); break;
				case 3: DoSpecialAbility( attacker ); break;
			}
		}

		public override void OnGotMeleeAttack( Mobile attacker )
		{
			base.OnGotMeleeAttack( attacker );

			int st = Utility.Random( 10, 10 );

			attacker.Damage( Utility.Random( st, 10 ), this );
			attacker.Stam -= Utility.Random( st, 10 );
			attacker.Mana -= Utility.Random( st, 10 );

			if ( 0.2 > Utility.RandomDouble() && attacker is BaseCreature )
			{
				BaseCreature c = (BaseCreature)attacker;

				if ( c.Controlled && c.ControlMaster != null )
				{
					c.ControlTarget = c.ControlMaster;
					c.ControlOrder = OrderType.Attack;
					c.Combatant = c.ControlMaster;
				}
			}

			DoSpecialAbility( attacker );
		}

		public override void OnGaveMeleeAttack( Mobile defender )
		{
			base.OnGaveMeleeAttack( defender );

			defender.Damage( Utility.Random( 10, 10 ), this );
			defender.Stam -= Utility.Random( 10, 10 );
			defender.Mana -= Utility.Random( 10, 10 );

			if ( 0.2 > Utility.RandomDouble() )
			{
				defender.Combatant = null;

			}

			if ( 0.2 > Utility.RandomDouble() && defender is BaseCreature )
			{
				BaseCreature c = (BaseCreature)defender;

				if ( c.Controlled && c.ControlMaster != null )
				{
					c.Combatant = null;
					c.Hits = (int)(c.Hits / 4);
				}
			}

			DoSpecialAbility( defender );
		}

		public void TeleportTarget( Mobile target )
		{
			Map map = target.Map;
			if ( map != null )
			{
				// try 10 times to find a teleport spot
				for ( int i = 0; i < 10; ++i )
				{
					int x = X + (Utility.RandomMinMax( 8, 12 ) * (Utility.RandomBool() ? 1 : -1));
					int y = Y + (Utility.RandomMinMax( 8, 12 ) * (Utility.RandomBool() ? 1 : -1));
					int z = Z;

					if ( !map.CanFit( x, y, z, 16, false, false ) )
						continue;

					Point3D from = target.Location;
					Point3D to = new Point3D( x, y, z );

					if ( !InLOS( to ) )
						continue;

					target.Location = to;
					target.ProcessDelta();

					target.Combatant = null;

					Effects.SendLocationParticles( EffectItem.Create( from, map, EffectItem.DefaultDuration ), 0x3728, 10, 10, 2023 );
					Effects.SendLocationParticles( EffectItem.Create(   to, map, EffectItem.DefaultDuration ), 0x3728, 10, 10, 5023 );

					Effects.PlaySound( to, map, 0x1FE );

					break;

				}
			}
		}

		private Timer m_SoundTimer;
		private bool m_HasTeleportedAway;


		public void TeleportMe( Mobile target )
		{
			if ( Utility.Random(10) == 0 )
			{
				Map map = this.Map;

				if ( map != null )
				{
					// try 10 times to find a teleport spot
					for ( int i = 0; i < 10; ++i )
					{
						int x = X + (Utility.RandomMinMax( 5, 10 ) * (Utility.RandomBool() ? 1 : -1));
						int y = Y + (Utility.RandomMinMax( 5, 10 ) * (Utility.RandomBool() ? 1 : -1));
						int z = Z;

						if ( !map.CanFit( x, y, z, 16, false, false ) )
							continue;

						Point3D from = this.Location;
						Point3D to = new Point3D( x, y, z );

						if ( !InLOS( to ) )
							continue;

						this.Location = to;
						this.ProcessDelta();

					//	this.Combatant = null;

						Effects.SendLocationParticles( EffectItem.Create( from, map, EffectItem.DefaultDuration ), 0x3728, 10, 10, 2023 );
						Effects.SendLocationParticles( EffectItem.Create(   to, map, EffectItem.DefaultDuration ), 0x3728, 10, 10, 5023 );

						Effects.PlaySound( to, map, 0x1FE );

						break;
					}
				}
			}

		//	base.OnThink();
		}

		public void DrainLife()
		{
			if( this.Map == null )
				return;

			ArrayList list = new ArrayList();

			foreach ( Mobile m in this.GetMobilesInRange( 2 ) )
			{
				if ( m == this || !CanBeHarmful( m ) )
					continue;

				if ( m is BaseCreature && (((BaseCreature)m).Controlled || ((BaseCreature)m).Summoned || ((BaseCreature)m).Team != this.Team) )
					list.Add( m );
				else if ( m.Player )
					list.Add( m );
			}

			foreach ( Mobile m in list )
			{
				DoHarmful( m );

				m.FixedParticles( 0x374A, 10, 15, 5013, 0x496, 0, EffectLayer.Waist );
				m.PlaySound( 0x231 );

				m.SendMessage( "You feel the life drain out of you!" );

				int toDrain = Utility.RandomMinMax( 10, 40 );

				Hits += toDrain;
				m.Damage( toDrain, this );
			}
		}

		public override void CheckReflect( Mobile caster, ref bool reflect )
		{
		//	if ( caster.Body.IsMale )
			if ( Utility.Random( 5 ) == 0 )
				reflect = true;
		}

		public override void AlterDamageScalarFrom( Mobile caster, ref double scalar )
		{
		//	if ( caster.Body.IsMale )
				scalar = 10; // 10x
		}


		public override int GetAngerSound()
		{
			if ( !Controlled )
				return 0x16A;
			else
				return 0x579; //Notice sound.

		//	return base.GetAngerSound();
		}
		public override int GetDeathSound()
		{
			return 0x576;
		}
		public override int GetAttackSound()
		{
			return 0x577;
		}
		public override int GetIdleSound()
		{
			return 0x578;
		}
		public override int GetHurtSound()
		{
			return 0x57A;
		}

		public override bool HasBreath{ get{ return true; } } // fire breath enabled

		public override bool BardImmune{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Deadly; } }		
		public override Poison HitPoison{ get{ return Poison.Lethal; } }
		

		public override WeaponAbility GetWeaponAbility()
		{
			switch ( Utility.Random( 4 ) )
			{
				default:
				case 0: return WeaponAbility.Dismount;
				case 1: return WeaponAbility.BleedAttack;
				case 2: return WeaponAbility.CrushingBlow;
				case 3: return WeaponAbility.MortalStrike;

			}
		}

		public HaazenDog( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );

			writer.Write( (int) 0 ); // version
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );

			int version = reader.ReadInt();

			if ( BaseSoundID == 0x16A )
				BaseSoundID = 0xA8;
		}
	}
}