using System;
using System.Collections;
using Server.Items;
using Server.Targeting;
using Server.Engines.CannedEvil;

namespace Server.Mobiles
{
	[CorpseName( "a corpse" )]
	public class Colossus : BaseChampion
	{
		//private Timer m_Timer;
		public override ChampionSkullType SkullType{ get{ return ChampionSkullType.Enlightenment; } }
		public override bool IsScaredOfScaryThings{ get{ return false; } }
		public override bool IsScaryToPets{ get{ return false; } }

		[Constructable]
		public Colossus () : base( AIType.AI_Mage, FightMode.Evil )
		{
			Name = "Colossus Guardian";
			Body = 189;
			BaseSoundID = 427;

				int hue = (Utility.Random( 1056 ) ) + 2;

				Hue = hue; 


			SetStr( 1000 );
			SetDex( 1000 );
			SetInt( 1000 );

			SetHits( 30000 );
			SetMana( 1000 );

			SetDamage( 32, 35 );

			SetDamageType( ResistanceType.Physical, 20 );
			SetDamageType( ResistanceType.Cold, 20 );
			SetDamageType( ResistanceType.Energy, 20 );							SetDamageType( ResistanceType.Poison, 20 );
			SetDamageType( ResistanceType.Fire, 20 );

			SetResistance( ResistanceType.Physical, 70 );
			SetResistance( ResistanceType.Fire, 70 );
			SetResistance( ResistanceType.Cold, 70 );
			SetResistance( ResistanceType.Poison, 70 );
			SetResistance( ResistanceType.Energy, 70 );


			SetSkill( SkillName.EvalInt, 200.0 );
			SetSkill( SkillName.Magery, 200.0 );
			SetSkill( SkillName.Meditation, 200 );
			SetSkill( SkillName.MagicResist, 200 );
			SetSkill( SkillName.Tactics, 200 );
			SetSkill( SkillName.Wrestling, 200 );

			Fame = 13000;
			Karma = -13000;

			VirtualArmor = 75;

		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.FilthyRich, 4 );

		}
		public override bool Uncalmable{ get{ return true; } }
		public override bool CanRummageCorpses{ get{ return true; } }
		public override int TreasureMapLevel{ get{ return 6; } }

		public override void OnGotMeleeAttack( Mobile attacker )
		{
			base.OnGotMeleeAttack( attacker );

			if ( 0.2 > Utility.RandomDouble() && attacker is BaseCreature )
			{
				BaseCreature c = (BaseCreature)attacker;

				if ( c.Controlled && c.ControlMaster != null )
				{
					c.ControlTarget = c.ControlMaster;
					c.ControlOrder = OrderType.Attack;
					c.Combatant = c.ControlMaster;
				}
			}
		}
		public override void OnGaveMeleeAttack( Mobile defender )
		{
			base.OnGaveMeleeAttack( defender );

			if ( 0.2 > Utility.RandomDouble() )
				defender.Combatant = null;
		}
		public override bool BardImmune{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Lethal; } }

		public Colossus( Serial serial ) : base( serial )
		{

		}



		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
		}

	}
}