using System;
using System.Collections;
using Server.Items;
using Server.Targeting;
using Server.Network;
using Server.Factions;

namespace Server.Mobiles
{
	[CorpseName( "a roach corpse" )]
	public class Roach : BaseCreature
	{
		private bool m_BurstSac;
		public bool BurstSac{ get{ return m_BurstSac; } }
		private Timer m_Timer;

		[Constructable]
		public Roach () : base( AIType.AI_Mage, FightMode.Aggressor, 10, 1, 0.2, 0.4 )
		{
			this.Name = "an Armageddon Roach";
			Body = 787;
			BaseSoundID = 1006; // 427
			Hue = Utility.RandomList( 1190, 1117, 542, 46, 443, 2315 );

			SetStr( 166, 195 );
			SetDex( 100, 124 );
			SetInt( 250, 295 );

			SetHits( 400, 425 );
			SetMana( 95 );

			SetDamage( 22, 25 );

			SetDamageType( ResistanceType.Physical, 30 );
			SetDamageType( ResistanceType.Cold, 30 );
			SetDamageType( ResistanceType.Energy, 40 );

			SetResistance( ResistanceType.Physical, 30, 50 );
			SetResistance( ResistanceType.Fire, 70 );
			SetResistance( ResistanceType.Cold, 70 );
			SetResistance( ResistanceType.Poison, 70 );
			SetResistance( ResistanceType.Energy, 70 );


			SetSkill( SkillName.EvalInt, 100.0 );
			SetSkill( SkillName.Magery, 80.1, 100.0 );
			SetSkill( SkillName.Meditation, 85.1, 95.0 );
			SetSkill( SkillName.MagicResist, 90.1, 100.0 );
			SetSkill( SkillName.Tactics, 70.1, 80.0 );

			Fame = 12000;
			Karma = -12000;

			VirtualArmor = 50;

		//	PackItem( new MagicJewel( 1 ) );


			m_Timer = new InternalTimer( this );
			m_Timer.Start();
			PackItem( new Silver( 4, 6 ) );
		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.FilthyRich, 1 );

		}
		public override void OnDamage( int amount, Mobile from, bool willKill )
		{
		//	SolenHelper.OnBlackDamage( from );

			if ( !willKill )
			{
				if ( !BurstSac )
				{
					if ( Hits < 50 )
					{
						PublicOverheadMessage( MessageType.Regular, 0x3B2, true, "* Spits toxic waste at you! *" );
						m_BurstSac = true;
					}
				}
				else if ( from != null && from != this && InRange( from, 1 ) )
				{
					SpillAcid( TimeSpan.FromSeconds( 10 ), 30, 30, from );
				}
			}

			base.OnDamage( amount, from, willKill );
		}
		public override bool OnBeforeDeath()
		{
			SpillAcid( TimeSpan.FromSeconds( 10 ), 30, 30, 1, 4 );

			return base.OnBeforeDeath();
		}
		public override void OnThink()
                {
			foreach ( Mobile m in this.GetMobilesInRange( 5 ) ) 
			{                                                   
				if ( m is PlayerMobile && !m.Hidden && this.CanSee( m ) && Utility.RandomDouble() <= 0.10 && m.AccessLevel == AccessLevel.Player )
				{
					PublicOverheadMessage( MessageType.Regular, 0x3B2, true, "* Spits toxic waste at you! *" );
					SpillAcid( TimeSpan.FromSeconds( 5 ), 15, 20, m );

				}
			}
		}
		public override bool Uncalmable{ get{ return true; } }
		public override bool CanRummageCorpses{ get{ return true; } }
		public override int TreasureMapLevel{ get{ return 5; } }
	//	public override int Hides{ get{ return 8; } } 
      	//	public override HideType HideType{ get{ return HideType.Armageddon; } }


		public Roach( Serial serial ) : base( serial )
		{
			m_Timer = new InternalTimer( this );
			m_Timer.Start();
		}

		public override void OnDelete()
		{
			m_Timer.Stop();

			base.OnDelete();
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 0 );
			writer.Write( m_BurstSac );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();
			m_BurstSac = reader.ReadBool();
		}
		private class InternalTimer : Timer
		{
			private Roach m_Owner;
			private int m_Count = 0;

			public InternalTimer( Roach owner ) : base( TimeSpan.FromSeconds( 0.15 ), TimeSpan.FromSeconds( 0.15 ) )
			{
				m_Owner = owner;
			}

			protected override void OnTick()
			{
				if ( (m_Count++ & 0x3) == 0 )
				{
					m_Owner.Direction = (Direction)(Utility.Random( 8 ) | 0x80);
				}

				m_Owner.Move( m_Owner.Direction );
			}
		}
	}
}